""" try: """
from pymongoGetDatabase import getDatabase
from standardizeData import standardizeData
from clusterRecentlyListenedSongs import clusterRecentlyListenedSongs
from recommendPlaylists import recommendPlaylists
import pandas as pd
import sys
import json
from bson.objectid import ObjectId

try:
    user = json.loads(sys.argv[1])

    dbname = getDatabase()

    if dbname is None:
        print("Could not connect to database")
        sys.exit(400)

    # Retrieve a collection named "user_1_items" from database
    recentlyPlayedSongsCollection = dbname["recentlyPlayedSongs"]
    # print(collection_name)

    recentlyPlayedSongs = recentlyPlayedSongsCollection.find(
        {"userId": user["userId"]}
    )  # .limit(3)

    numRecentlyPlayedSongs = recentlyPlayedSongsCollection.count_documents(
        {"userId": user["userId"]}
    )

    if numRecentlyPlayedSongs < 3:
        print("Not enough songs played to recommend playlists")
        sys.exit(400)

    listOfSongIds = []

    for item in recentlyPlayedSongs:
        listOfSongIds.append(str(item["fileId"]))

    # print(listOfSongIds)

    songFeaturesCollection = dbname["songFeatures"]
    # print("ASDADS" + str(listOfSongIds[0]))

    """ recentlyListenedSongFeatures = songFeaturesCollection.find(
        {"songId": {"$in": listOfSongIds}}
    ) """

    """ print("Song Features: ")
    for item in recentlyListenedSongFeatures:
        # This does not give a very readable output
        print(item) """

    allSongFeatures = songFeaturesCollection.find()

    songFeaturesDf = pd.DataFrame(allSongFeatures)

    del songFeaturesDf["_id"]
    # print(songFeaturesDf.head(20))

    songFeaturesDf = standardizeData(songFeaturesDf)
    # print(songFeaturesDf.head(20))

    filters = songFeaturesDf["songId"].isin(listOfSongIds)
    # print(filters)
    recentlyListenedSongFeatures = songFeaturesDf[filters]
    # print("\n\nrecent\n\n", recentlyListenedSongFeatures)

    [cluster1Idx, cluster2Idx, cluster3Idx] = clusterRecentlyListenedSongs(
        recentlyListenedSongFeatures
    )

    # print("\ncluster1\n", cluster1Idx)
    # print("\ncluster2\n", cluster2Idx)
    # print("\ncluster3\n", cluster3Idx)

    [
        recommendedPlaylist1,
        recommendedPlaylist2,
        recommendedPlaylist3,
    ] = recommendPlaylists(
        cluster1Idx,
        cluster2Idx,
        cluster3Idx,
        songFeaturesDf,
        recentlyListenedSongFeatures,
    )

    objectIdsPlaylist1 = []
    objectIdsPlaylist2 = []
    objectIdsPlaylist3 = []
    for song in recommendedPlaylist1:
        # print(ObjectId(song))
        objectIdsPlaylist1.append(ObjectId(song))
    for song in recommendedPlaylist2:
        objectIdsPlaylist2.append(ObjectId(song))
    for song in recommendedPlaylist3:
        objectIdsPlaylist3.append(ObjectId(song))

    # print(recommendedPlaylist1)
    # print(recommendedPlaylist2)
    # print(recommendedPlaylist3)

    playlistsCollection = dbname["playlists"]

    """ playlistsCollection.delete_many(
        {"userId": ObjectId(user["userId"]), "autogenerated": True}
    ) """

    insertList = [
        {
            "files": objectIdsPlaylist1,
            "autogenerated": True,
            "visibility": "private",
            "playlistName": "Recommended Playlist 1",
            "userId": ObjectId(user["userId"]),
            "username": user["username"],
            "sharedWith": [],
        },
        {
            "files": objectIdsPlaylist2,
            "autogenerated": True,
            "visibility": "private",
            "playlistName": "Recommended Playlist 2",
            "userId": ObjectId(user["userId"]),
            "username": user["username"],
            "sharedWith": [],
        },
        {
            "files": objectIdsPlaylist3,
            "autogenerated": True,
            "visibility": "private",
            "playlistName": "Recommended Playlist 3",
            "userId": ObjectId(user["userId"]),
            "username": user["username"],
            "sharedWith": [],
        },
    ]

    insertedPlaylists = playlistsCollection.insert_many(insertList)

    # print list of the _id values of the inserted documents:
    print(insertedPlaylists.inserted_ids)


except Exception as e:
    print("Error in mainPythonScript.py")
    print(e)
    if "No connection could be made" in e:
        sys.exit(500)
